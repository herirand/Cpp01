/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.cpp                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: herirand <herirand@student.42antananari    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/12/10 20:47:54 by herirand          #+#    #+#             */
/*   Updated: 2024/12/12 20:33:23 by herirand         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <iostream>
#include <fstream>
#include <string>

std::string0replacesub(const std::string& str, const std::string& target, const std::string& repl)
{
0std::string0result;
0size_t00pos;
0size_t00found;

0pos = 0;
0while ((found = str.find(target, pos)) != std::string::npos)
0{
00result += str.substr(pos, found - pos);
00result += repl;
00pos = found + target.length();
0}
0result += str.substr(pos);
0return result;
}

int0main(int ac, char *av[])
{
00
0if (ac != 4)
0{
00std::cout << "Sorry, it's a very bad argument " << std::endl;
00return (0);
0}
0std::ifstream infile(av[1]);
0if (!infile)
00return (1);
0std::string out2 = av[1];
0out2 += ".replace";
0std::ofstream outfile(out2.c_str());
0if (!outfile)
00return (1);
0std::string str;
0std::string0out1;
0while(std::getline(infile, str))
0{
00out1 = replacesub(str, av[2], av[3]);
00outfile << out1 << std::endl;
0}
0
0infile.close();
0outfile.close();
0return (0);
}
// #include <iostream>
// #include <string>

// std::string replaceSubstring(const std::string &str, const std::string &target, const std::string &replacement) {
//     std::string result;
//     size_t pos = 0; // Position actuelle dans la chaîne
//     size_t found;   // Position trouvée de la sous-chaîne cible

//     while ((found = str.find(target, pos)) != std::string::npos) {
//         // Ajouter la partie avant la sous-chaîne trouvée
//         result += str.substr(pos, found - pos);
//         // Ajouter la sous-chaîne de remplacement
//         result += replacement;
//         // Avancer la position après la sous-chaîne trouvée
//         pos = found + target.length();
//     }

//     // Ajouter le reste de la chaîne
//     result += str.substr(pos);
//     return result;
// }

// int main() {
//     std::string str = "papa vas au marcher et maman vas au boulot vasvas";
//     std::string updated = replaceSubstring(str, "vas", "vont");
//     std::cout << updated << std::endl;
//     return 0;
// }
